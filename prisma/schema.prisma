// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 租户模型
model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  domain    String?
  logo      String?
  settings  Json?
  plan      TenantPlan @default(FREE)
  status    TenantStatus @default(ACTIVE)
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 租户成员
  members   TenantMember[]
  
  // 租户配额
  quota     TenantQuota?
  
  // 租户数据
  projects     Project[]
  requirements Requirement[]
  modules      Module[]
  tasks        Task[]
  aiRequestLogs AIRequestLog[]

  @@map("tenants")
}

// 租户成员模型
model TenantMember {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  role      TenantRole @default(MEMBER)
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  tenant    Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
  @@map("tenant_members")
}

// 租户配额模型
model TenantQuota {
  id               String   @id @default(cuid())
  tenantId         String   @unique
  maxProjects      Int      @default(10)
  maxUsers         Int      @default(5)
  maxRequirements  Int      @default(100)
  maxAIRequests    Int      @default(1000)
  maxStorage       Int      @default(1073741824) // 1GB in bytes
  usedProjects     Int      @default(0)
  usedUsers        Int      @default(0)
  usedRequirements Int      @default(0)
  usedAIRequests   Int      @default(0)
  usedStorage      Int      @default(0)
  resetAt          DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // 关联
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_quotas")
}

// 用户模型
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  avatar          String?
  currentTenantId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 租户成员关系
  tenantMemberships TenantMember[]
  
  @@map("users")
}

// AI请求日志模型
model AIRequestLog {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String
  requestType  AIRequestType
  resourceId   String?
  resourceType String?
  tokens       Int?
  cost         Float?
  status       String   @default("SUCCESS")
  errorMessage String?
  createdAt    DateTime @default(now())

  // 关联
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("ai_request_logs")
}

// 项目模型
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联租户
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // 需求文档
  requirements Requirement[]
  
  // 功能模块
  modules Module[]

  @@map("projects")
}

// 需求文档模型
model Requirement {
  id          String   @id @default(cuid())
  title       String
  content     String   // 原始需求文档内容
  type        RequirementType @default(FUNCTIONAL)
  priority    Priority @default(MEDIUM)
  status      RequirementStatus @default(PENDING)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联租户
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // 关联项目
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // AI分析结果
  analysis RequirementAnalysis?

  @@map("requirements")
}

// 需求分析结果模型
model RequirementAnalysis {
  id          String   @id @default(cuid())
  summary     String   // AI生成的需求摘要
  keyFeatures Json     // 提取的关键功能点
  complexity  Complexity @default(MEDIUM)
  estimatedHours Int?   // 预估工时
  suggestions String?  // AI建议
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联需求
  requirementId String @unique
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  @@map("requirement_analyses")
}

// 功能模块模型
model Module {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        ModuleType @default(FEATURE)
  priority    Priority @default(MEDIUM)
  status      ModuleStatus @default(TODO)
  estimatedHours Int?
  actualHours Int?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联租户
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // 关联项目
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // 开发任务
  tasks Task[]

  @@map("modules")
}

// 开发任务模型（原子化代码生成单元）
model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        TaskType @default(DEVELOPMENT)
  priority    Priority @default(MEDIUM)
  status      TaskStatus @default(TODO)
  estimatedHours Int?
  actualHours Int?
  
  // 技术栈信息
  techStack   Json?    // 使用的技术栈
  
  // AI生成的代码
  generatedCode String?
  codeLanguage  String?
  
  // 文件路径（如果是文件创建任务）
  filePath    String?
  
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联租户
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // 关联模块
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

// 枚举类型定义
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  TESTING
  COMPLETED
  ARCHIVED
}

enum RequirementType {
  FUNCTIONAL
  NON_FUNCTIONAL
  BUSINESS
  TECHNICAL
}

enum RequirementStatus {
  PENDING
  ANALYZING
  ANALYZED
  APPROVED
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Complexity {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum ModuleType {
  FEATURE
  COMPONENT
  SERVICE
  UTILITY
  INTEGRATION
}

enum ModuleStatus {
  TODO
  IN_PROGRESS
  TESTING
  COMPLETED
  BLOCKED
}

enum TaskType {
  DEVELOPMENT
  TESTING
  DOCUMENTATION
  DEPLOYMENT
  REFACTORING
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  TESTING
  COMPLETED
  BLOCKED
}

enum TenantPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum TenantRole {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum AIRequestType {
  REQUIREMENT_ANALYSIS
  MODULE_GENERATION
  TASK_GENERATION
  CODE_GENERATION
  FLOWCHART_GENERATION
  E2E_GENERATION
}
